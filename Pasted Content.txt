–û—Å—å –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø–æ—Å—ñ–±–Ω–∏–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤–∞—à–æ–≥–æ Telegram-–±–æ—Ç–∞ –¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å –Ω–∞ Google Cloud Run. –Ø, MANUS AI, –ø—Ä–æ–≤–µ–¥—É –≤–∞—Å —á–µ—Ä–µ–∑ —É—Å—ñ –µ—Ç–∞–ø–∏: –≤—ñ–¥ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–æ–¥—É –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è. –ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –≤–∞—à –∫–æ–¥, –∞–¥–∞–ø—Ç—É—î–º–æ –π–æ–≥–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Webhook –Ω–∞ Google Cloud Run —ñ —Ä–æ–∑–≥–æ—Ä–Ω–µ–º–æ –π–æ–≥–æ. –ü–æ—á–Ω–µ–º–æ!

---

## –û–≥–ª—è–¥ –ø—Ä–æ—î–∫—Ç—É

–í–∞—à –±–æ—Ç –¥–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∞–Ω–æ–Ω—ñ–º–Ω–æ –∑–∞–¥–∞–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫—ñ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ–π –≥—Ä—É–ø—ñ, –∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è –≤ –ø—É–±–ª—ñ—á–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ. –ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –≤–∞—à —Ç–æ–∫–µ–Ω, –∫–∞–Ω–∞–ª `@christ_qa`, –≥—Ä—É–ø—É –∞–¥–º—ñ–Ω—ñ–≤ `-1002576988593` —Ç–∞ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ `404389668`.

---

## –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –≤–∏–º–æ–≥–∏

–ü–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —É –≤–∞—Å —î:

1. **–ê–∫–∫–∞—É–Ω—Ç Google Cloud**:
   - –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –Ω–∞ [Google Cloud](https://cloud.google.com/) —ñ –∞–∫—Ç–∏–≤—É–π—Ç–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –∫—Ä–µ–¥–∏—Ç ($300), —è–∫—â–æ —Ü–µ –≤–∞—à –ø–µ—Ä—à–∏–π –ø—Ä–æ—î–∫—Ç.
2. **Google Cloud SDK**:
   - –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å [Google Cloud SDK](https://cloud.google.com/sdk/docs/install).
3. **Git**:
   - –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å [Git](https://git-scm.com/downloads).
4. **Python 3.9+**:
   - –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —É –≤–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ Python 3.9 –∞–±–æ –Ω–æ–≤—ñ—à—É –≤–µ—Ä—Å—ñ—é.
5. **Telegram Bot Token**:
   - –í–∞—à —Ç–æ–∫–µ–Ω: `7540984242:AAHwnXjpUHjmV4bjCeKgTq7YR0_9fVC_OHs`.
6. **–ö–∞–Ω–∞–ª —ñ –≥—Ä—É–ø–∞ –≤ Telegram**:
   - –ü—É–±–ª—ñ—á–Ω–∏–π –∫–∞–Ω–∞–ª: `@christ_qa`.
   - –ü—Ä–∏–≤–∞—Ç–Ω–∞ –≥—Ä—É–ø–∞ –∞–¥–º—ñ–Ω—ñ–≤: `-1002576988593`.
   - ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: `404389668`.

---

## –ö—Ä–æ–∫ 1: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ—î–∫—Ç—É

### 1.1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó

–°—Ç–≤–æ—Ä—ñ—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ø—Ä–æ—î–∫—Ç—É —Ç–∞ –ø–µ—Ä–µ–π–¥—ñ—Ç—å —É –Ω–µ—ó:

```bash
mkdir telegram-qa-bot
cd telegram-qa-bot
```

### 1.2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Git

–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–π—Ç–µ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π:

```bash
git init
```

### 1.3. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤

#### **bot.py**
–û—Å—å –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è –≤–∞—à–æ–≥–æ –∫–æ–¥—É –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Webhook –Ω–∞ Google Cloud Run. –°–∫–æ–ø—ñ—é–π—Ç–µ —ó—ó –≤ —Ñ–∞–π–ª `bot.py`:

```python
import os
import logging
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, Filters, ContextTypes, CallbackQueryHandler, ConversationHandler
from dotenv import load_dotenv
from typing import Dict, List
import asyncio
from aiohttp import web

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è ConversationHandler
CHOOSING, TYPING_QUESTION, TYPING_CATEGORY, TYPING_REPLY = range(4)

# –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_GROUP_ID = os.getenv('ADMIN_GROUP_ID')
ADMIN_IDS = [int(id_) for id_ in os.getenv('ADMIN_IDS', '').split(',') if id_]

# –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–∏—Ç–∞–Ω—å
CATEGORIES: Dict[str, str] = {
    'general': 'üåü –ó–∞–≥–∞–ª—å–Ω—ñ',
    'spiritual': 'üôè –î—É—Ö–æ–≤–Ω—ñ',
    'personal': 'üë§ –û—Å–æ–±–∏—Å—Ç—ñ',
    'urgent': '‚ö°Ô∏è –¢–µ—Ä–º—ñ–Ω–æ–≤—ñ'
}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
application = Application.builder().token(TOKEN).build()

class Database:
    def __init__(self, filename='db.json'):
        self.filename = filename
        self.questions = {}
        self.stats = {
            'total_questions': 0,
            'answered_questions': 0,
            'categories': {}
        }
        self.load()

    def load(self):
        try:
            if os.path.exists(self.filename):
                with open(self.filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.questions = data.get('questions', {})
                    self.stats = data.get('stats', {
                        'total_questions': 0,
                        'answered_questions': 0,
                        'categories': {}
                    })
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")

    def save(self):
        try:
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump({
                    'questions': self.questions,
                    'stats': self.stats
                }, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")

    def add_question(self, question_id: str, question_data: dict):
        self.questions[question_id] = question_data
        self.stats['total_questions'] += 1
        category = question_data.get('category')
        if category:
            self.stats['categories'][category] = self.stats['categories'].get(category, 0) + 1
        self.save()

    def update_question(self, question_id: str, update_data: dict):
        if question_id in self.questions:
            self.questions[question_id].update(update_data)
            if update_data.get('status') == 'answered':
                self.stats['answered_questions'] += 1
            self.save()

    def get_question(self, question_id: str) -> dict:
        return self.questions.get(question_id, {})

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()

def get_main_keyboard():
    keyboard = [
        ["üìù –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è"],
        ["üìã –ú–æ—ó –ø–∏—Ç–∞–Ω–Ω—è", "‚úâÔ∏è –ú–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"],
        ["‚ùì –î–æ–ø–æ–º–æ–≥–∞"],
        [f"üì¢ –ö–∞–Ω–∞–ª –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_category_keyboard():
    keyboard = []
    for cat_id, name in CATEGORIES.items():
        keyboard.append([InlineKeyboardButton(text=name, callback_data=f"cat_{cat_id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(keyboard)

def get_admin_keyboard(question_id: str):
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"answer_{question_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{question_id}")
        ],
        [
            InlineKeyboardButton("‚≠êÔ∏è –í–∞–∂–ª–∏–≤–µ", callback_data=f"important_{question_id}"),
            InlineKeyboardButton("üìå –ó–∞–∫—Ä—ñ–ø–∏—Ç–∏", callback_data=f"pin_{question_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")
    if update.effective_chat.type == 'private':
        welcome_text = (
            f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
            "ü§ñ –¶–µ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å.\n\n"
            "üìù –í–∏ –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ó–∞–¥–∞–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–Ω–æ–Ω—ñ–º–Ω–æ\n"
            "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–≤–æ—ó –ø–∏—Ç–∞–Ω–Ω—è\n"
            "‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ –∫–∞–Ω–∞–ª—ñ\n\n"
            "‚ùóÔ∏è –í—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∞–Ω–æ–Ω—ñ–º–Ω—ñ\n"
            "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª—ñ"
        )
        await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())
    return CHOOSING

async def webhook(request):
    try:
        update = Update.de_json(await request.json(), application.bot)
        await application.process_update(update)
        return web.Response(status=200)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ Webhook: {e}")
        return web.Response(status=500)

async def start_server():
    app = web.Application()
    app.router.add_post('/webhook', webhook)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()

def main():
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(Filters.text & ~Filters.command, handle_message)
        ],
        states={
            CHOOSING: [
                CallbackQueryHandler(button_handler),
                MessageHandler(Filters.text & ~Filters.command, handle_message)
            ],
            TYPING_CATEGORY: [
                CallbackQueryHandler(button_handler),
                MessageHandler(Filters.text & ~Filters.command, handle_message)
            ],
            TYPING_QUESTION: [
                MessageHandler(Filters.text & ~Filters.command, handle_regular_message),
                CallbackQueryHandler(button_handler)
            ],
            TYPING_REPLY: [
                MessageHandler(Filters.text & ~Filters.command, handle_regular_message),
                CallbackQueryHandler(button_handler)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_handler))

    loop = asyncio.get_event_loop()
    loop.run_until_complete(start_server())
    logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    loop.run_forever()

if __name__ == "__main__":
    main()

# –î–æ–¥–∞–π—Ç–µ —Ä–µ—à—Ç—É —Ñ—É–Ω–∫—Ü—ñ–π –∑ –≤–∞—à–æ–≥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥—É –Ω–∏–∂—á–µ:

def get_admin_menu_keyboard():
    keyboard = [
        ["üì• –ù–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è", "‚≠êÔ∏è –í–∞–∂–ª–∏–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è"],
        ["‚úÖ –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ", "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω—ñ"],
        ["üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_questions_list_keyboard(questions: List[dict], page: int = 0, items_per_page: int = 5):
    keyboard = []
    start_idx = page * items_per_page
    end_idx = start_idx + items_per_page
    
    for q in questions[start_idx:end_idx]:
        status_emoji = {'pending': '‚è≥', 'answered': '‚úÖ', 'rejected': '‚ùå'}.get(q['status'], '‚è≥')
        short_text = q['text'][:30] + '...' if len(q['text']) > 30 else q['text']
        keyboard.append([InlineKeyboardButton(f"{status_emoji} {CATEGORIES[q['category']]}: {short_text}", callback_data=f"view_q_{q['id']}")])
        if q['status'] == 'rejected':
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏", callback_data=f"restore_{q['id']}")])
    
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if end_idx < len(questions):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_menu")])
    return InlineKeyboardMarkup(keyboard)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –¥—ñ—é:", reply_markup=get_main_keyboard())
    return CHOOSING

async def show_my_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_questions = [q for q_id, q in db.questions.items() if q.get('user_id') == user_id]
    
    if not user_questions:
        await update.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å.", reply_markup=get_main_keyboard())
        return CHOOSING
    
    questions_text = "üìã –í–∞—à—ñ –ø–∏—Ç–∞–Ω–Ω—è:\n\n"
    for i, q in enumerate(user_questions, 1):
        status = {'pending': '‚è≥ –û—á—ñ–∫—É—î', 'answered': '‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å', 'rejected': '‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ'}.get(q['status'], '‚è≥ –û—á—ñ–∫—É—î')
        questions_text += f"{i}. {CATEGORIES[q['category']]}\n–ü–∏—Ç–∞–Ω–Ω—è: {q['text']}\n–°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    await update.message.reply_text(questions_text, reply_markup=get_main_keyboard())
    return CHOOSING

async def show_my_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    answered_questions = [q for q_id, q in db.questions.items() if q.get('user_id') == user_id and q.get('status') == 'answered']
    
    if not answered_questions:
        await update.message.reply_text("üìù –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.", reply_markup=get_main_keyboard())
        return CHOOSING
    
    answers_text = "‚úâÔ∏è –í–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n\n"
    for i, q in enumerate(answered_questions, 1):
        answers_text += f"{i}. {CATEGORIES[q['category']]}\n–ü–∏—Ç–∞–Ω–Ω—è: {q['text']}\n–í—ñ–¥–ø–æ–≤—ñ–¥—å: {q.get('answer', '')}\n\n"
    
    await update.message.reply_text(answers_text, reply_markup=get_main_keyboard())
    return CHOOSING

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    is_admin = user_id in ADMIN_IDS

    if update.effective_chat.type == 'private':
        if text == "üìù –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è":
            await update.message.reply_text("üìù –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=get_category_keyboard())
            return TYPING_CATEGORY
        elif text == "üìã –ú–æ—ó –ø–∏—Ç–∞–Ω–Ω—è":
            return await show_my_questions(update, context)
        elif text == "‚úâÔ∏è –ú–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ":
            return await show_my_answers(update, context)
        elif text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
            help_text = (
                "üìå –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:\n"
                "1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üìù –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è'\n"
                "2Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é\n"
                "3Ô∏è‚É£ –ù–∞–ø–∏—à—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è\n"
                "–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑‚Äô—è–≤–ª—è—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª—ñ."
            )
            await update.message.reply_text(help_text)
            return CHOOSING
        elif text == "üì¢ –ö–∞–Ω–∞–ª –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏":
            await update.message.reply_text(
                "–ü–µ—Ä–µ–π–¥—ñ—Ç—å —É –∫–∞–Ω–∞–ª:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.lstrip('@')}")]])
            )
            return CHOOSING
        elif is_admin and text in ["üì• –ù–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è", "‚≠êÔ∏è –í–∞–∂–ª–∏–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è", "‚úÖ –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ", "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω—ñ", "üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]:
            return await handle_admin_menu(update, context)
        else:
            keyboard = get_admin_menu_keyboard() if is_admin else get_main_keyboard()
            await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=keyboard)
            return CHOOSING
    return await handle_regular_message(update, context)

async def handle_regular_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message_text = update.message.text

    if context.user_data.get('answering') and user_id in ADMIN_IDS:
        question_id = context.user_data['answering']
        question = db.questions[question_id]
        answer_text = message_text
        message_text = f"‚ùì {CATEGORIES[question['category']]}\n\n{question['text']}\n\n‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å:\n{answer_text}"
        message = await context.bot.send_message(chat_id=CHANNEL_ID, text=message_text)
        db.update_question(question_id, {
            'status': 'answered',
            'answer': answer_text,
            'answer_time': datetime.now().isoformat(),
            'answer_message_id': message.message_id
        })
        context.user_data.clear()
        await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ", reply_markup=get_admin_menu_keyboard())
        return CHOOSING

    elif context.user_data.get('category') and context.user_data.get('waiting_for_question'):
        category = context.user_data['category']
        question_id = f"q{len(db.questions) + 1}"
        db.add_question(question_id, {
            'id': question_id,
            'category': category,
            'text': message_text,
            'status': 'pending',
            'time': datetime.now().isoformat(),
            'important': False,
            'user_id': user_id
        })
        await handle_admin_question(update, context, question_id)
        context.user_data.clear()
        await update.message.reply_text("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!", reply_markup=get_main_keyboard())
        return CHOOSING

    else:
        await update.message.reply_text("‚ùóÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", reply_markup=get_main_keyboard())
        return CHOOSING

async def handle_admin_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question_id: str):
    question = db.questions[question_id]
    message_text = f"üì® –ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è\n\n–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {CATEGORIES[question['category']]}\n–ü–∏—Ç–∞–Ω–Ω—è: {question['text']}"
    await context.bot.send_message(chat_id=int(ADMIN_GROUP_ID), text=message_text, reply_markup=get_admin_keyboard(question_id))

async def handle_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats_text = (
            f"üìù –í—Å—å–æ–≥–æ: {db.stats['total_questions']}\n"
            f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ: {db.stats['answered_questions']}\n"
            f"‚è≥ –û—á—ñ–∫—É—é—Ç—å: {db.stats['total_questions'] - db.stats['answered_questions']}\n\n"
            "üìä –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n"
        )
        for cat_id, cat_name in CATEGORIES.items():
            stats_text += f"{cat_name}: {db.stats['categories'].get(cat_id, 0)}\n"
        await update.message.reply_text(stats_text, reply_markup=get_admin_menu_keyboard())
    elif text == "üì• –ù–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è":
        new_questions = [q for q in db.questions.values() if q['status'] == 'pending']
        if not new_questions:
            await update.message.reply_text("üì≠ –ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å", reply_markup=get_admin_menu_keyboard())
        else:
            context.user_data['current_questions'] = new_questions
            context.user_data['current_page'] = 0
            await update.message.reply_text("üì• –ù–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=get_questions_list_keyboard(new_questions))
    return CHOOSING

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    await query.answer()

    if data == "back_to_main":
        await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_keyboard())
        context.user_data.clear()
        return CHOOSING
    elif data.startswith("cat_"):
        category = data.replace("cat_", "")
        context.user_data['category'] = category
        context.user_data['waiting_for_question'] = True
        await query.message.edit_text(f"üìù {CATEGORIES[category]}\n–ù–∞–ø–∏—à—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è:")
        return TYPING_QUESTION
    elif data.startswith("answer_"):
        question_id = data.replace("answer_", "")
        context.user_data['answering'] = question_id
        question = db.questions[question_id]
        await query.message.edit_text(f"‚úçÔ∏è {CATEGORIES[question['category']]}\n{question['text']}\n–ù–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å:")
        return TYPING_REPLY
    elif data.startswith("reject_"):
        question_id = data.replace("reject_", "")
        db.update_question(question_id, {'status': 'rejected'})
        await query.message.edit_text(f"‚ùå –ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
        return CHOOSING
    elif data.startswith("important_"):
        question_id = data.replace("important_", "")
        question = db.questions[question_id]
        is_important = not question.get('important', False)
        db.update_question(question_id, {'important': is_important})
        await query.message.edit_text(f"{'‚≠êÔ∏è –í–∞–∂–ª–∏–≤–µ' if is_important else 'üîµ –ó–≤–∏—á–∞–π–Ω–µ'}", reply_markup=get_admin_keyboard(question_id))
        return CHOOSING
    elif data.startswith("pin_"):
        question_id = data.replace("pin_", "")
        await context.bot.pin_chat_message(chat_id=int(ADMIN_GROUP_ID), message_id=query.message.message_id)
        await query.answer("üìå –ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–æ!")
        return CHOOSING
    return CHOOSING
```

#### **requirements.txt**
–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª —ñ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏:

```
python-telegram-bot==20.8
python-dotenv==1.0.1
aiohttp==3.9.5
```

#### **.env**
–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª `.env` —ñ–∑ –≤–∞—à–∏–º–∏ –¥–∞–Ω–∏–º–∏:

```
TELEGRAM_TOKEN=7540984242:AAHwnXjpUHjmV4bjCeKgTq7YR0_9fVC_OHs
CHANNEL_ID=@christ_qa
ADMIN_GROUP_ID=-1002576988593
ADMIN_IDS=404389668
```

#### **Dockerfile**
–°—Ç–≤–æ—Ä—ñ—Ç—å `Dockerfile` –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü—ñ—ó:

```
FROM python:3.9-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
EXPOSE 8080
CMD ["python", "bot.py"]
```

#### **.dockerignore**
–°—Ç–≤–æ—Ä—ñ—Ç—å `.dockerignore`:

```
__pycache__
*.pyc
*.pyo
.env
```

#### **db.json**
–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ñ–∞–π–ª –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:

```json
{
  "questions": {},
  "stats": {
    "total_questions": 0,
    "answered_questions": 0,
    "categories": {
      "general": 0,
      "spiritual": 0,
      "personal": 0,
      "urgent": 0
    }
  }
}
```

---

## –ö—Ä–æ–∫ 2: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google Cloud

### 2.1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è

–£–≤—ñ–π–¥—ñ—Ç—å —É Google Cloud:

```bash
gcloud auth login
```

### 2.2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—î–∫—Ç—É

–°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—î–∫—Ç (–∑–∞–º—ñ–Ω—ñ—Ç—å `telegram-qa-bot-123` –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID):

```bash
gcloud projects create telegram-qa-bot-123 --set-as-default
gcloud config set project telegram-qa-bot-123
```

### 2.3. –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è API

–£–≤—ñ–º–∫–Ω—ñ—Ç—å API:

```bash
gcloud services enable run.googleapis.com artifactregistry.googleapis.com
```

### 2.4. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Artifact Registry

–°—Ç–≤–æ—Ä—ñ—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –¥–ª—è Docker-–æ–±—Ä–∞–∑—ñ–≤ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–∞—à —Ä–µ–≥—ñ–æ–Ω, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `europe-west1`):

```bash
gcloud artifacts repositories create qa-bot-repo --repository-format=docker --location=europe-west1
```

---

## –ö—Ä–æ–∫ 3: –°–±–æ—Ä–∫–∞ —Ç–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è

### 3.1. –°–±–æ—Ä–∫–∞ Docker-–æ–±—Ä–∞–∑—É

–ü–æ–±—É–¥—É–π—Ç–µ –æ–±—Ä–∞–∑:

```bash
docker build -t qa-bot .
```

### 3.2. –¢–µ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è

–¢–µ–≥–Ω—ñ—Ç—å —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –æ–±—Ä–∞–∑ (–∑–∞–º—ñ–Ω—ñ—Ç—å `europe-west1` —ñ `telegram-qa-bot-123`):

```bash
docker tag qa-bot europe-west1-docker.pkg.dev/telegram-qa-bot-123/qa-bot-repo/qa-bot
docker push europe-west1-docker.pkg.dev/telegram-qa-bot-123/qa-bot-repo/qa-bot
```

### 3.3. –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–∞ Google Cloud Run

–†–æ–∑–≥–æ—Ä–Ω—ñ—Ç—å —Å–µ—Ä–≤—ñ—Å:

```bash
gcloud run deploy telegram-qa-bot \
  --image europe-west1-docker.pkg.dev/telegram-qa-bot-123/qa-bot-repo/qa-bot \
  --platform managed \
  --region europe-west1 \
  --allow-unauthenticated \
  --port 8080 \
  --set-env-vars "TELEGRAM_TOKEN=7540984242:AAHwnXjpUHjmV4bjCeKgTq7YR0_9fVC_OHs,CHANNEL_ID=@christ_qa,ADMIN_GROUP_ID=-1002576988593,ADMIN_IDS=404389668"
```

---

## –ö—Ä–æ–∫ 4: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Webhook

### 4.1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è URL

–û—Ç—Ä–∏–º–∞–π—Ç–µ URL —Å–µ—Ä–≤—ñ—Å—É:

```bash
SERVICE_URL=$(gcloud run services describe telegram-qa-bot --platform managed --region europe-west1 --format 'value(status.url)')
echo $SERVICE_URL
```

### 4.2. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Webhook

–ù–∞–ª–∞—à—Ç—É–π—Ç–µ Webhook:

```bash
curl -F "url=${SERVICE_URL}/webhook" "https://api.telegram.org/bot7540984242:AAHwnXjpUHjmV4bjCeKgTq7YR0_9fVC_OHs/setWebhook"
```

–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å:

```bash
curl "https://api.telegram.org/bot7540984242:AAHwnXjpUHjmV4bjCeKgTq7YR0_9fVC_OHs/getWebhookInfo"
```

---

## –ö—Ä–æ–∫ 5: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è

1. –ù–∞–ø–∏—à—ñ—Ç—å `/start` –±–æ—Ç—É.
2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "üìù –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, –≤–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è.
3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑‚Äô—è–≤–∏–ª–æ—Å—å –ø–∏—Ç–∞–Ω–Ω—è –≤ –≥—Ä—É–ø—ñ `-1002576988593`.
4. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —ñ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é –≤ `@christ_qa`.

---

## –£—Å—É–Ω–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º

- **–õ–æ–≥–∏**:
  ```bash
  gcloud logging read "resource.type=cloud_run_revision" --project telegram-qa-bot-123
  ```
- **Webhook**:
  ```bash
  curl "https://api.telegram.org/bot7540984242:AAHwnXjpUHjmV4bjCeKgTq7YR0_9fVC_OHs/getWebhookInfo"
  ```

---

## –í–∏—Å–Ω–æ–≤–æ–∫

–í—ñ—Ç–∞—é! –í–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ —Ç–∞ —Ä–æ–∑–≥–æ—Ä–Ω—É–ª–∏ Telegram-–±–æ—Ç–∞ –Ω–∞ Google Cloud Run. –í—ñ–Ω –≥–æ—Ç–æ–≤–∏–π –ø—Ä–∏–π–º–∞—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è, –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ —ó—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —ñ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ `@christ_qa`. –£–¥–∞—á—ñ! üöÄ