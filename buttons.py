from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from datetime import datetime
from typing import Dict, List, Optional, Tuple

from config import logger, CHOOSING, TYPING_QUESTION, TYPING_CATEGORY, TYPING_REPLY, CATEGORIES, ADMIN_IDS, CHANNEL_ID
from keyboards import (
    get_main_keyboard, get_admin_menu_keyboard, get_category_keyboard, 
    get_questions_list_keyboard, get_question_view_keyboard, get_back_button
)
from utils import is_admin, format_question_for_admin, handle_admin_question, notify_user_about_answer, format_stats
from database import Database

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    try:
        query = update.callback_query
        user_id = query.from_user.id
        data = query.data

        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
        await query.answer()

        if data == "back_to_main":
            await query.message.edit_text(
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=get_main_keyboard()
            )
            context.user_data.clear()
            return CHOOSING

        elif data.startswith("cat_"):
            category = data.replace("cat_", "")
            context.user_data['category'] = category
            context.user_data['waiting_for_question'] = True

            await query.message.edit_text(
                f"üìù –í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {CATEGORIES[category]}\n\n"
                "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.\n"
                "‚ùóÔ∏è –ü–∏—Ç–∞–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ."
            )
            return TYPING_QUESTION

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if not is_admin(user_id) and any(data.startswith(prefix) for prefix in ['view_q_', 'answer_', 'reject_', 'important_', 'edit_']):
            await query.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.",
                disable_notification=True
            )
            return CHOOSING

        if data == "admin_menu":
            await query.message.edit_text(
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=get_admin_menu_keyboard()
            )
            context.user_data.clear()
            return CHOOSING

        elif data.startswith("page_"):
            page = int(data.replace("page_", ""))
            questions = context.user_data.get('current_questions', [])
            context.user_data['current_page'] = page
            
            await query.message.edit_text(
                "–û–±–µ—Ä—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è:",
                reply_markup=get_questions_list_keyboard(questions, page)
            )
            return CHOOSING

        elif data.startswith("view_q_"):
            question_id = data.replace("view_q_", "")
            question = db.get_question(question_id)
            
            if not question:
                await query.message.edit_text("‚ùå –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return CHOOSING

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = format_question_for_admin(question)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
            keyboard = get_question_view_keyboard(
                question_id, 
                question, 
                context.user_data.get('current_page', 0)
            )

            await query.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
            return CHOOSING

        elif data.startswith("answer_"):
            question_id = data.replace("answer_", "")
            question = db.get_question(question_id)
            
            if not question:
                await query.message.edit_text("‚ùå –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return CHOOSING

            context.user_data['answering'] = question_id

            await query.message.edit_text(
                f"‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è:\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {CATEGORIES[question['category']]}\n"
                f"–ü–∏—Ç–∞–Ω–Ω—è: {question['text']}\n\n"
                f"–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:",
                reply_markup=get_back_button(f"view_q_{question_id}")
            )
            return TYPING_REPLY

        elif data.startswith("edit_"):
            question_id = data.replace("edit_", "")
            question = db.get_question(question_id)
            
            if not question:
                await query.message.edit_text("‚ùå –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return CHOOSING

            context.user_data['editing'] = question_id

            await query.message.edit_text(
                f"üîÑ –ó–º—ñ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {CATEGORIES[question['category']]}\n"
                f"–ü–∏—Ç–∞–Ω–Ω—è: {question['text']}\n\n"
                f"–ü–æ—Ç–æ—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:\n{question.get('answer', '')}\n\n"
                f"–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:",
                reply_markup=get_back_button(f"view_q_{question_id}")
            )
            return TYPING_REPLY

        elif data.startswith("reject_"):
            question_id = data.replace("reject_", "")
            question = db.get_question(question_id)
            
            if not question:
                await query.message.edit_text("‚ùå –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return CHOOSING

            db.update_question(question_id, {'status': 'rejected'})
            question = db.get_question(question_id)

            keyboard = [[
                InlineKeyboardButton("‚Ü©Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏", callback_data=f"restore_{question_id}"),
                InlineKeyboardButton("üîô –î–æ —Å–ø–∏—Å–∫—É", callback_data=f"page_{context.user_data.get('current_page', 0)}")
            ]]

            await query.message.edit_text(
                f"üì® –ü–∏—Ç–∞–Ω–Ω—è\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {CATEGORIES[question['category']]}\n"
                f"–ü–∏—Ç–∞–Ω–Ω—è: {question['text']}\n\n"
                f"‚ùå –ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CHOOSING

        elif data.startswith("restore_"):
            question_id = data.replace("restore_", "")
            question = db.get_question(question_id)
            
            if not question:
                await query.message.edit_text("‚ùå –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return CHOOSING

            db.update_question(question_id, {'status': 'pending'})
            question = db.get_question(question_id)

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from keyboards import get_admin_keyboard

            await query.message.edit_text(
                f"üì® –ü–∏—Ç–∞–Ω–Ω—è\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {CATEGORIES[question['category']]}\n"
                f"–ü–∏—Ç–∞–Ω–Ω—è: {question['text']}\n\n"
                f"‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ",
                reply_markup=get_admin_keyboard(question_id)
            )
            return CHOOSING

        elif data.startswith("important_"):
            question_id = data.replace("important_", "")
            question = db.get_question(question_id)
            
            if not question:
                await query.message.edit_text("‚ùå –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return CHOOSING

            is_important = not question.get('important', False)
            db.update_question(question_id, {'important': is_important})
            question = db.get_question(question_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = []
            if question['status'] == 'pending':
                keyboard.append([
                    InlineKeyboardButton("‚úÖ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"answer_{question_id}"),
                    InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{question_id}")
                ])
                keyboard.append([
                    InlineKeyboardButton(
                        "üîµ –ó—Ä–æ–±–∏—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–º" if is_important else "‚≠êÔ∏è –ó—Ä–æ–±–∏—Ç–∏ –≤–∞–∂–ª–∏–≤–∏–º",
                        callback_data=f"important_{question_id}"
                    ),
                    InlineKeyboardButton("üìå –ó–∞–∫—Ä—ñ–ø–∏—Ç–∏", callback_data=f"pin_{question_id}")
                ])
            
            keyboard.append([InlineKeyboardButton("üîô –î–æ —Å–ø–∏—Å–∫—É", callback_data=f"page_{context.user_data.get('current_page', 0)}")])

            status_emoji = "‚≠êÔ∏è" if is_important else "üîµ"
            await query.message.edit_text(
                f"üì® –ü–∏—Ç–∞–Ω–Ω—è {status_emoji}\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {CATEGORIES[question['category']]}\n"
                f"–ü–∏—Ç–∞–Ω–Ω—è: {question['text']}\n\n"
                f"{'‚≠êÔ∏è –ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∞–∂–ª–∏–≤–µ' if is_important else 'üîµ –ü–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –∑–≤–∏—á–∞–π–Ω–µ'}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CHOOSING

        elif data.startswith("pin_"):
            question_id = data.replace("pin_", "")
            question = db.get_question(question_id)
            
            if not question:
                await query.message.edit_text("‚ùå –ü–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return CHOOSING

            try:
                # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω–æ–≤
                await context.bot.pin_chat_message(
                    chat_id=int(ADMIN_GROUP_ID),
                    message_id=query.message.message_id,
                    disable_notification=True
                )
                await query.answer("üìå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–æ!")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                await query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            return CHOOSING

        elif data == "stats":
            stats = db.get_stats()
            stats_text = format_stats(stats)

            await query.message.edit_text(
                stats_text,
                reply_markup=get_back_button("admin_menu")
            )
            return CHOOSING

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")
            return CHOOSING

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏: {e}")
        try:
            await query.message.edit_text(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∑ –∫–æ–º–∞–Ω–¥–∏ /start"
            )
        except:
            await update.effective_message.reply_text(
                "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∑ –∫–æ–º–∞–Ω–¥–∏ /start"
            )
        return CHOOSING
