from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from typing import Dict, List, Optional, Tuple

from config import logger, CHOOSING, TYPING_QUESTION, TYPING_CATEGORY, TYPING_REPLY, ADMIN_IDS
from keyboards import get_main_keyboard, get_category_keyboard, get_admin_menu_keyboard
from utils import is_admin, format_question_for_user, generate_help_text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    try:
        user = update.effective_user
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ
        if update.effective_chat.type == 'private':
            welcome_text = (
                f"üëã –í—ñ—Ç–∞—é, {user.first_name}!\n\n"
                "ü§ñ –¶–µ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å.\n\n"
                "üìù –í–∏ –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ó–∞–¥–∞–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–Ω–æ–Ω—ñ–º–Ω–æ\n"
                "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–≤–æ—ó –ø–∏—Ç–∞–Ω–Ω—è\n"
                "‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ –∫–∞–Ω–∞–ª—ñ\n\n"
                "‚ùóÔ∏è –í—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∞–Ω–æ–Ω—ñ–º–Ω—ñ\n"
                "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª—ñ"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await update.message.reply_text(
                welcome_text,
                reply_markup=get_main_keyboard(),
                disable_notification=True
            )

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from keyboards import get_channel_button
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∫–∞–Ω–∞–ª–∞
            await update.message.reply_text(
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏:",
                reply_markup=get_channel_button(),
                disable_notification=True
            )

        return CHOOSING

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ start: {e}")
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            disable_notification=True
        )
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    try:
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –¥—ñ—é:",
            reply_markup=get_main_keyboard(),
            disable_notification=True
        )
        return CHOOSING

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ cancel: {e}")
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            disable_notification=True
        )
        return CHOOSING

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    try:
        help_text = generate_help_text()
        await update.message.reply_text(
            help_text,
            reply_markup=get_main_keyboard(),
            disable_notification=True
        )
        return CHOOSING
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ help: {e}")
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            disable_notification=True
        )
        return CHOOSING

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not is_admin(user_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_main_keyboard(),
                disable_notification=True
            )
            return CHOOSING
        
        await update.message.reply_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_admin_menu_keyboard(),
            disable_notification=True
        )
        return CHOOSING
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ admin: {e}")
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            disable_notification=True
        )
        return CHOOSING
