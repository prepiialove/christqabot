from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from typing import List, Dict, Optional

from config import CATEGORIES, CHANNEL_ID, logger

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Returns:
        ReplyKeyboardMarkup: –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    keyboard = [
        ["üìù –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è"],
        ["üìã –ú–æ—ó –ø–∏—Ç–∞–Ω–Ω—è", "‚úâÔ∏è –ú–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"],
        ["‚ùì –î–æ–ø–æ–º–æ–≥–∞"],
        [f"üì¢ –ö–∞–Ω–∞–ª –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_admin_menu_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    """
    keyboard = [
        ["üì• –ù–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è", "‚≠êÔ∏è –í–∞–∂–ª–∏–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è"],
        ["‚úÖ –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ", "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω—ñ"],
        ["üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_category_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    """
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for cat_id, name in CATEGORIES.items():
        keyboard.append([InlineKeyboardButton(text=name, callback_data=f"cat_{cat_id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(keyboard)

def get_admin_keyboard(question_id: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–º
    
    Args:
        question_id: ID –≤–æ–ø—Ä–æ—Å–∞
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    """
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"answer_{question_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{question_id}")
        ],
        [
            InlineKeyboardButton("‚≠êÔ∏è –í–∞–∂–ª–∏–≤–µ", callback_data=f"important_{question_id}"),
            InlineKeyboardButton("üìå –ó–∞–∫—Ä—ñ–ø–∏—Ç–∏", callback_data=f"pin_{question_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_questions_list_keyboard(questions: List[dict], page: int = 0, items_per_page: int = 5) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    Args:
        questions: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
    """
    keyboard = []
    start_idx = page * items_per_page
    end_idx = start_idx + items_per_page
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    for q in questions[start_idx:end_idx]:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫ —Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞
        status_emoji = {
            'pending': '‚è≥',
            'answered': '‚úÖ',
            'rejected': '‚ùå'
        }.get(q['status'], '‚è≥')
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤
        short_text = q['text'][:30] + '...' if len(q['text']) > 30 else q['text']
        keyboard.append([InlineKeyboardButton(
            f"{status_emoji} {CATEGORIES[q['category']]}: {short_text}",
            callback_data=f"view_q_{q['id']}"
        )])
        
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if q['status'] == 'rejected':
            keyboard.append([InlineKeyboardButton(
                "‚Ü©Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏",
                callback_data=f"restore_{q['id']}"
            )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if end_idx < len(questions):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="admin_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def get_channel_button() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    
    Returns:
        InlineKeyboardMarkup: –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª
    """
    return InlineKeyboardMarkup([[
        InlineKeyboardButton(
            "üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏",
            url=f"https://t.me/{CHANNEL_ID.lstrip('@')}"
        )
    ]])

def get_back_button(callback_data: str = "back_to_main") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    
    Args:
        callback_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è callback_query
        
    Returns:
        InlineKeyboardMarkup: –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    """
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=callback_data)
    ]])

def get_question_view_keyboard(question_id: str, question: dict, current_page: int = 0) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
    
    Args:
        question_id: ID –≤–æ–ø—Ä–æ—Å–∞
        question: –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Å–ø–∏—Å–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
    """
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–ø—Ä–æ—Å–∞
    if question['status'] == 'pending':
        keyboard.append([
            InlineKeyboardButton("‚úÖ –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"answer_{question_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{question_id}")
        ])
        keyboard.append([
            InlineKeyboardButton(
                "‚≠êÔ∏è –í–∞–∂–ª–∏–≤–µ" if not question.get('important') else "üîµ –ó–≤–∏—á–∞–π–Ω–µ",
                callback_data=f"important_{question_id}"
            )
        ])
    elif question['status'] == 'answered':
        keyboard.append([
            InlineKeyboardButton("üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data=f"edit_{question_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{question_id}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
    keyboard.append([InlineKeyboardButton("üîô –î–æ —Å–ø–∏—Å–∫—É", callback_data=f"page_{current_page}")])
    
    return InlineKeyboardMarkup(keyboard)
