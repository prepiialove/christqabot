from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from datetime import datetime
from typing import Dict, List, Optional, Tuple

from config import logger, CHOOSING, TYPING_QUESTION, TYPING_CATEGORY, TYPING_REPLY, CATEGORIES, ADMIN_IDS, CHANNEL_ID
from keyboards import get_main_keyboard, get_admin_menu_keyboard, get_category_keyboard, get_channel_button
from utils import is_admin, format_question_for_user, handle_admin_question, notify_user_about_answer, generate_help_text
from database import Database

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    try:
        user_id = update.effective_user.id
        text = update.message.text
        is_admin_user = is_admin(user_id)

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ
        if update.effective_chat.type == 'private':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            if text == "üìù –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è":
                await update.message.reply_text(
                    "üìù –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–∏—Ç–∞–Ω–Ω—è:",
                    reply_markup=get_category_keyboard(),
                    disable_notification=True
                )
                return TYPING_CATEGORY

            elif text == "üìã –ú–æ—ó –ø–∏—Ç–∞–Ω–Ω—è":
                return await show_my_questions(update, context, db)

            elif text == "‚úâÔ∏è –ú–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ":
                return await show_my_answers(update, context, db)

            elif text == "üì¢ –ö–∞–Ω–∞–ª –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
                await update.message.reply_text(
                    "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –∫–∞–Ω–∞–ª, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –≤—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:",
                    reply_markup=get_channel_button(),
                    disable_notification=True
                )
                return CHOOSING

            elif text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
                help_text = generate_help_text()
                await update.message.reply_text(help_text, disable_notification=True)
                return CHOOSING

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
            elif text in ["üì• –ù–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è", "‚≠êÔ∏è –í–∞–∂–ª–∏–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è", "‚úÖ –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ", "‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω—ñ", "üîÑ –ó–º—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]:
                if not is_admin_user:
                    await update.message.reply_text(
                        "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        reply_markup=get_main_keyboard(),
                        disable_notification=True
                    )
                    return CHOOSING
                return await handle_admin_menu(update, context, db)

            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = get_admin_menu_keyboard() if is_admin_user else get_main_keyboard()
            await update.message.reply_text(
                "–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:",
                reply_markup=keyboard,
                disable_notification=True
            )
            return CHOOSING

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        return await handle_regular_message(update, context, db)

    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ handle_message: {e}")
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∑ –∫–æ–º–∞–Ω–¥–∏ /start",
            disable_notification=True
        )
        return CHOOSING

async def handle_regular_message(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    try:
        user_id = update.effective_user.id
        message_text = update.message.text

        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {message_text}")
        logger.info(f"–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω: {context.user_data}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        if (context.user_data.get('answering') or context.user_data.get('editing')) and is_admin(user_id):
            try:
                question_id = context.user_data.get('answering') or context.user_data.get('editing')
                answer_text = message_text
                question = db.get_question(question_id)
                is_editing = context.user_data.get('editing')

                # –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–∞–Ω–∞–ª
                message_text = (
                    f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è ({CATEGORIES[question['category']]})"
                    f"\n\n{question['text']}\n\n"
                    f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ —Å–ª—É–∂–∏—Ç–µ–ª—è:\n{answer_text}"
                )

                if is_editing:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await context.bot.edit_message_text(
                            chat_id=CHANNEL_ID,
                            message_id=question.get('answer_message_id'),
                            text=message_text
                        )
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                        message = await context.bot.send_message(
                            chat_id=CHANNEL_ID,
                            text=message_text + "\n\nüîÑ (–æ–Ω–æ–≤–ª–µ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å)",
                            disable_notification=True
                        )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = await context.bot.send_message(
                        chat_id=CHANNEL_ID,
                        text=message_text,
                        disable_notification=True
                    )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞
                update_data = {
                    'status': 'answered',
                    'answer': answer_text,
                    'answer_time': datetime.now().isoformat()
                }
                
                if not is_editing:
                    update_data['answer_message_id'] = message.message_id
                
                db.update_question(question_id, update_data)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –æ—Ç–≤–µ—Ç–µ
                await notify_user_about_answer(context, db.get_question(question_id))

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.clear()

                success_message = "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ" if is_editing else "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ"
                await update.message.reply_text(
                    success_message,
                    reply_markup=get_admin_menu_keyboard(),
                    disable_notification=True
                )
                return CHOOSING

            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {e}")
                context.user_data.clear()
                await update.message.reply_text(
                    "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    reply_markup=get_admin_menu_keyboard(),
                    disable_notification=True
                )
                return CHOOSING

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        elif context.user_data.get('category') and context.user_data.get('waiting_for_question'):
            try:
                category = context.user_data['category']

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
                question_id = f"q{len(db.questions) + 1}"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                db.add_question(question_id, {
                    'id': question_id,
                    'category': category,
                    'text': message_text,
                    'status': 'pending',
                    'time': datetime.now().isoformat(),
                    'important': False,
                    'user_id': user_id
                })

                logger.info(f"–ü–∏—Ç–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∑ ID {question_id}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                await handle_admin_question(context, question_id, db)

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.clear()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await update.message.reply_text(
                    "‚úÖ –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!\n\n"
                    "‚Ä¢ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –π–æ–≥–æ –∞–Ω–æ–Ω—ñ–º–Ω–æ\n"
                    "‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑'—è–≤–∏—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª—ñ\n"
                    "‚Ä¢ –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç–∏ —â–µ –æ–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è",
                    reply_markup=get_main_keyboard(),
                    disable_notification=True
                )
                return CHOOSING

            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è: {e}")
                context.user_data.clear()
                await update.message.reply_text(
                    "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                    reply_markup=get_main_keyboard(),
                    disable_notification=True
                )
                return CHOOSING

        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é –≤ –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω–æ–≤
            if update.effective_chat.id == int(ADMIN_GROUP_ID) and is_admin(user_id):
                await update.message.reply_text(
                    "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                    reply_markup=get_admin_menu_keyboard(),
                    disable_notification=True
                )
            else:
                await update.message.reply_text(
                    "‚ùóÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º.\n"
                    "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —â–æ–± –ø–æ—á–∞—Ç–∏.",
                    reply_markup=get_main_keyboard(),
                    disable_notification=True
                )
            return CHOOSING

    except Exception as e:
        logger.error(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ handle_regular_message: {e}")
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∑ –∫–æ–º–∞–Ω–¥–∏ /start",
            reply_markup=get_main_keyboard(),
            disable_notification=True
        )
        return CHOOSING

async def show_my_questions(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    try:
        user_id = update.effective_user.id
        user_questions = db.get_questions_by_user(user_id)

        if not user_questions:
            await update.message.reply_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å.\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è¬ª, —â–æ–± –∑–∞–¥–∞—Ç–∏ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è!",
                reply_markup=get_main_keyboard(),
                disable_notification=True
            )
            return CHOOSING

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
        questions_text = "üìã –í–∞—à—ñ –ø–∏—Ç–∞–Ω–Ω—è:\n\n"
        for i, q in enumerate(user_questions, 1):
            status = {
                'pending': '‚è≥ –û—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
                'answered': '‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–æ',
                'rejected': '‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ'
            }.get(q['status'], '‚è≥ –û—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ')

            questions_text += (
                f"{i}. {CATEGORIES[q['category']]}\n"
                f"–ü–∏—Ç–∞–Ω–Ω—è: {q['text']}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
            )

        await update.message.reply_text(
            questions_text,
            reply_markup=get_main_keyboard(),
            disable_notification=True
        )
        return CHOOSING

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –ø–∏—Ç–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∞—à–∏—Ö –ø–∏—Ç–∞–Ω—å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_main_keyboard(),
            disable_notification=True
        )
        return CHOOSING

async def show_my_answers(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    try:
        user_id = update.effective_user.id
        answered_questions = [q for q in db.get_questions_by_user(user_id) if q.get('status') == 'answered']

        if not answered_questions:
            await update.message.reply_text(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è.\n"
                "–í—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑'—è–≤–ª—è—Ç—å—Å—è —Ç—É—Ç, —è–∫ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å!",
                reply_markup=get_main_keyboard(),
                disable_notification=True
            )
            return CHOOSING

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ç–≤–µ—Ç–æ–≤
        answers_text = "‚úâÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤–∞—à—ñ –ø–∏—Ç–∞–Ω–Ω—è:\n\n"
        for i, q in enumerate(answered_questions, 1):
            answers_text += (
                f"{i}. {CATEGORIES[q['category']]}\n"
                f"–ü–∏—Ç–∞–Ω–Ω—è: {q['text']}\n"
                f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {q['answer']}\n\n"
            )

        await update.message.reply_text(
            answers_text,
            reply_markup=get_main_keyboard(),
            disable_notification=True
        )
        return CHOOSING

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_main_keyboard(),
            disable_notification=True
        )
        return CHOOSING

async def handle_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    try:
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not is_admin(user_id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                disable_notification=True
            )
            return CHOOSING
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
        text = update.message.text
        
        if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = db.get_stats()
            stats_text = format_stats(stats)
            
            await update.message.reply_text(
                stats_text,
                reply_markup=get_admin_menu_keyboard(),
                disable_notification=True
            )
            return CHOOSING
            
        elif text == "üì• –ù–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è":
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            new_questions = db.get_questions_by_status('pending')
            if not new_questions:
                await update.message.reply_text(
                    "üì≠ –ù–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å –Ω–µ–º–∞—î",
                    reply_markup=get_admin_menu_keyboard(),
                    disable_notification=True
                )
                return CHOOSING
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            contex
(Content truncated due to size limit. Use line ranges to read in chunks)