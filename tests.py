import unittest
import asyncio
import os
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from config import CATEGORIES, CHOOSING, TYPING_QUESTION, TYPING_CATEGORY, TYPING_REPLY
from database import Database
from utils import is_admin, format_question_for_user, format_datetime, format_stats

class TestConfig(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def test_categories(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        self.assertIn('general', CATEGORIES)
        self.assertIn('spiritual', CATEGORIES)
        self.assertIn('personal', CATEGORIES)
        self.assertIn('urgent', CATEGORIES)
        
    def test_conversation_states(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        self.assertEqual(CHOOSING, 0)
        self.assertEqual(TYPING_QUESTION, 1)
        self.assertEqual(TYPING_CATEGORY, 2)
        self.assertEqual(TYPING_REPLY, 3)

class TestDatabase(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç–∞–º"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.test_db_file = 'test_db.json'
        self.test_sqlite_file = 'test_db.sqlite'
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if os.path.exists(self.test_db_file):
            os.remove(self.test_db_file)
        if os.path.exists(self.test_sqlite_file):
            os.remove(self.test_sqlite_file)
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db_json = Database(db_type='json', filename=self.test_db_file)
        self.db_sqlite = Database(db_type='sqlite', sqlite_file=self.test_sqlite_file)
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(self.test_db_file):
            os.remove(self.test_db_file)
        if os.path.exists(self.test_sqlite_file):
            os.remove(self.test_sqlite_file)
    
    def test_add_question_json(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ JSON –±–∞–∑—É"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        question_id = 'test1'
        question_data = {
            'id': question_id,
            'category': 'general',
            'text': 'Test question',
            'status': 'pending',
            'time': datetime.now().isoformat(),
            'important': False,
            'user_id': 123456789
        }
        
        self.db_json.add_question(question_id, question_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω
        self.assertIn(question_id, self.db_json.questions)
        self.assertEqual(self.db_json.questions[question_id]['text'], 'Test question')
        self.assertEqual(self.db_json.stats['total_questions'], 1)
        self.assertEqual(self.db_json.stats['categories']['general'], 1)
    
    def test_add_question_sqlite(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ SQLite –±–∞–∑—É"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        question_id = 'test1'
        question_data = {
            'id': question_id,
            'category': 'general',
            'text': 'Test question',
            'status': 'pending',
            'time': datetime.now().isoformat(),
            'important': False,
            'user_id': 123456789
        }
        
        self.db_sqlite.add_question(question_id, question_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω
        self.assertIn(question_id, self.db_sqlite.questions)
        self.assertEqual(self.db_sqlite.questions[question_id]['text'], 'Test question')
        self.assertEqual(self.db_sqlite.stats['total_questions'], 1)
        self.assertEqual(self.db_sqlite.stats['categories']['general'], 1)
    
    def test_update_question(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        question_id = 'test1'
        question_data = {
            'id': question_id,
            'category': 'general',
            'text': 'Test question',
            'status': 'pending',
            'time': datetime.now().isoformat(),
            'important': False,
            'user_id': 123456789
        }
        
        self.db_json.add_question(question_id, question_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        update_data = {
            'status': 'answered',
            'answer': 'Test answer',
            'answer_time': datetime.now().isoformat()
        }
        
        self.db_json.update_question(question_id, update_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω
        self.assertEqual(self.db_json.questions[question_id]['status'], 'answered')
        self.assertEqual(self.db_json.questions[question_id]['answer'], 'Test answer')
        self.assertEqual(self.db_json.stats['answered_questions'], 1)
    
    def test_get_questions_by_status(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        self.db_json.add_question('test1', {
            'id': 'test1',
            'category': 'general',
            'text': 'Test question 1',
            'status': 'pending',
            'time': datetime.now().isoformat(),
            'important': False,
            'user_id': 123456789
        })
        
        self.db_json.add_question('test2', {
            'id': 'test2',
            'category': 'spiritual',
            'text': 'Test question 2',
            'status': 'answered',
            'time': datetime.now().isoformat(),
            'important': False,
            'user_id': 123456789,
            'answer': 'Test answer',
            'answer_time': datetime.now().isoformat()
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        pending_questions = self.db_json.get_questions_by_status('pending')
        answered_questions = self.db_json.get_questions_by_status('answered')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.assertEqual(len(pending_questions), 1)
        self.assertEqual(pending_questions[0]['id'], 'test1')
        
        self.assertEqual(len(answered_questions), 1)
        self.assertEqual(answered_questions[0]['id'], 'test2')

class TestUtils(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è —É—Ç–∏–ª–∏—Ç"""
    
    def test_is_admin(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        # –ü–∞—Ç—á–∏–º ADMIN_IDS
        with patch('utils.ADMIN_IDS', [123456789]):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞
            self.assertTrue(is_admin(123456789))
            self.assertFalse(is_admin(987654321))
    
    def test_format_datetime(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        iso_date = '2023-01-01T12:00:00'
        formatted_date = format_datetime(iso_date)
        self.assertEqual(formatted_date, '01.01.2023 12:00:00')
    
    def test_format_question_for_user(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        question = {
            'category': 'general',
            'text': 'Test question',
            'status': 'pending'
        }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        formatted_question = format_question_for_user(question)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertIn('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: üåü –ó–∞–≥–∞–ª—å–Ω—ñ', formatted_question)
        self.assertIn('–ü–∏—Ç–∞–Ω–Ω—è: Test question', formatted_question)
        self.assertIn('–°—Ç–∞—Ç—É—Å: ‚è≥ –û—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ', formatted_question)
    
    def test_format_stats(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            'total_questions': 10,
            'answered_questions': 5,
            'categories': {
                'general': 4,
                'spiritual': 3,
                'personal': 2,
                'urgent': 1
            }
        }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        formatted_stats = format_stats(stats)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertIn('–í—Å—å–æ–≥–æ –ø–∏—Ç–∞–Ω—å: 10', formatted_stats)
        self.assertIn('–í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞–¥–∞–Ω–æ: 5', formatted_stats)
        self.assertIn('–û—á—ñ–∫—É—é—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: 5', formatted_stats)
        self.assertIn('–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏: 50.0%', formatted_stats)

if __name__ == '__main__':
    unittest.main()
