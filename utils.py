import logging
from datetime import datetime
from typing import Dict, List, Optional, Tuple

from config import logger, ADMIN_IDS, ADMIN_GROUP_ID, CHANNEL_ID, CATEGORIES
from database import Database

async def handle_admin_question(context, question_id: str, db: Database) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        question_id: ID –≤–æ–ø—Ä–æ—Å–∞
        db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        question = db.get_question(question_id)
        if not question:
            logger.error(f"–í–æ–ø—Ä–æ—Å {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
            
        message_text = (
            f"üì® –ù–æ–≤–µ –∞–Ω–æ–Ω—ñ–º–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {CATEGORIES[question['category']]}\n"
            f"–ü–∏—Ç–∞–Ω–Ω—è: {question['text']}"
        )

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from keyboards import get_admin_keyboard

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤
        admin_message = await context.bot.send_message(
            chat_id=int(ADMIN_GROUP_ID),
            text=message_text,
            reply_markup=get_admin_keyboard(question_id),
            disable_notification=True
        )

        logger.info(f"–ü–∏—Ç–∞–Ω–Ω—è {question_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω–∞–º")
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è –∞–¥–º—ñ–Ω–∞–º: {e}")
        return False

def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –∏–Ω–∞—á–µ False
    """
    return user_id in ADMIN_IDS

def format_question_for_user(question: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        question: –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    """
    status = {
        'pending': '‚è≥ –û—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ',
        'answered': '‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–æ',
        'rejected': '‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ'
    }.get(question['status'], '‚è≥ –û—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ')
    
    text = (
        f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {CATEGORIES[question['category']]}\n"
        f"–ü–∏—Ç–∞–Ω–Ω—è: {question['text']}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}"
    )
    
    if question.get('answer') and question['status'] == 'answered':
        text += f"\n\n–í—ñ–¥–ø–æ–≤—ñ–¥—å: {question['answer']}"
    
    return text

def format_question_for_admin(question: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    
    Args:
        question: –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    """
    status_emoji = {
        'pending': '‚è≥',
        'answered': '‚úÖ',
        'rejected': '‚ùå'
    }.get(question['status'], '‚è≥')
    
    important_emoji = "‚≠êÔ∏è" if question.get('important', False) else ""
    
    text = (
        f"üì® –ü–∏—Ç–∞–Ω–Ω—è {status_emoji} {important_emoji}\n\n"
        f"ID: {question['id']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {CATEGORIES[question['category']]}\n"
        f"–ü–∏—Ç–∞–Ω–Ω—è: {question['text']}\n"
        f"–ß–∞—Å: {format_datetime(question['time'])}"
    )
    
    if question.get('answer'):
        text += f"\n\n‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å:\n{question['answer']}"
        if question.get('answer_time'):
            text += f"\n\n–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {format_datetime(question['answer_time'])}"
    
    return text

def format_datetime(iso_date: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    
    Args:
        iso_date: –î–∞—Ç–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    """
    try:
        dt = datetime.fromisoformat(iso_date)
        return dt.strftime("%d.%m.%Y %H:%M:%S")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã {iso_date}: {e}")
        return iso_date

def format_stats(stats: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        stats: –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    total = stats['total_questions']
    answered = stats['answered_questions']
    pending = total - answered
    
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üìù –í—Å—å–æ–≥–æ –ø–∏—Ç–∞–Ω—å: {total}\n"
        f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞–¥–∞–Ω–æ: {answered}\n"
        f"‚è≥ –û—á—ñ–∫—É—é—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {pending}\n\n"
        "üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:\n"
    )
    
    for cat_id, cat_name in CATEGORIES.items():
        count = stats['categories'].get(cat_id, 0)
        percentage = (count / total * 100) if total > 0 else 0
        text += f"{cat_name}: {count} ({percentage:.1f}%)\n"
    
    if answered > 0:
        efficiency = (answered / total * 100)
        text += f"\nüìà –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏: {efficiency:.1f}%"
    
    return text

async def notify_user_about_answer(context, question: dict) -> bool:
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∏–ª–∏
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        question: –î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        user_id = question.get('user_id')
        if not user_id:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –≤ –≤–æ–ø—Ä–æ—Å–µ {question['id']}")
            return False
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from keyboards import get_channel_button
        
        message_text = (
            f"‚úÖ –ù–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞–¥–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å!\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {CATEGORIES[question['category']]}\n"
            f"–ü–∏—Ç–∞–Ω–Ω—è: {question['text']}\n\n"
            f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {question.get('answer', '')}\n\n"
            f"–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ –∫–∞–Ω–∞–ª—ñ:"
        )
        
        await context.bot.send_message(
            chat_id=user_id,
            text=message_text,
            reply_markup=get_channel_button(),
            disable_notification=False  # –í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É —Å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ–º
        )
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å {question['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {question.get('user_id')}: {e}")
        return False

def generate_help_text() -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–ø—Ä–∞–≤–∫–∏
    
    Returns:
        str: –¢–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
    """
    return (
        "üìå –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:\n\n"
        "1Ô∏è‚É£ –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è:\n"
        "   ‚Ä¢ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üìù –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è'\n"
        "   ‚Ä¢ –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é\n"
        "   ‚Ä¢ –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è\n\n"
        "2Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n"
        "   ‚Ä¢ –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞—é—Ç—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏\n"
        "   ‚Ä¢ –ü—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–æ–Ω–∞ –∑'—è–≤–∏—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª—ñ\n"
        "   ‚Ä¢ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å\n"
        "   ‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª –º–æ–∂–Ω–∞ –ø–æ –∫–Ω–æ–ø—Ü—ñ 'üì¢ –ö–∞–Ω–∞–ª –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏'\n\n"
        "3Ô∏è‚É£ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–∏—Ç–∞–Ω—å:\n"
        "   üåü –ó–∞–≥–∞–ª—å–Ω—ñ - –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è\n"
        "   üôè –î—É—Ö–æ–≤–Ω—ñ - –ø–∏—Ç–∞–Ω–Ω—è –≤—ñ—Ä–∏\n"
        "   üë§ –û—Å–æ–±–∏—Å—Ç—ñ - –æ—Å–æ–±–∏—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è\n"
        "   ‚ö°Ô∏è –¢–µ—Ä–º—ñ–Ω–æ–≤—ñ - —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è\n\n"
        "‚ùóÔ∏è –í–∞–∂–ª–∏–≤–æ:\n"
        "‚Ä¢ –í—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∞–Ω–æ–Ω—ñ–º–Ω—ñ\n"
        "‚Ä¢ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –±–∞—á–∞—Ç—å —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –ø–∏—Ç–∞–Ω–Ω—è\n"
        "‚Ä¢ –í –∫–∞–Ω–∞–ª—ñ –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
    )
